"""Keep track of data across runs."""
from pathlib import Path
import logging
import pickle
from collections import defaultdict


class Hoover:
    """Sucks up all data generated by experiment."""

    def __init__(self, cfg, name=None):
        self.datasets = dict()
        self.pmfs = defaultdict(dict)
        self.results = None
        self.cfg = cfg
        if name is None:
            self.name = None
        else:
            self.name = name

    def add_data(self, run, export):
        if self.cfg.get('save_data', False):
            self.datasets.update({run: export})

    def add_results(self, run, acquisition, export):
        export, all_pmfs = export
        export['run'] = run
        export['acquisition'] = acquisition

        if self.results is None:
            self.results = export
        else:
            self.results = self.results.append(export, ignore_index=True)

        if all_pmfs is not None:
            self.pmfs[run][acquisition] = all_pmfs

    def save(self):
        if self.name is None:
            base = Path('.')
        else:
            base = Path(f'model_{self.name}')
            base.mkdir(parents=True, exist_ok=True)

        if self.cfg.save_data:
            pickle.dump(self.datasets, open(base / "datasets.pkl", "wb"))
        pickle.dump(self.pmfs, open(base / "pmfs.pkl", "wb"))
        self.results.to_pickle(base / 'results.pkl')
        logging.info('Saving results to file.')
